class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode ptr = head;
        ListNode kTail = null;
        ListNode newHead = null;
        while(ptr != null){
            int count = 0;
            ptr = head;
            while(count<k && ptr!=null){
                ptr = ptr.next;
                count++;
            }
            if(count == k){
                ListNode revHead = reverseLinkedList(head,k);
                if(newHead == null){
                    newHead = revHead;
                }
                if(kTail != null){
                    kTail.next = revHead;
                }
                kTail = head;
                head = ptr;
            }
        }
        if(kTail != null){
            kTail.next = head;
        }
        return newHead == null ? head: newHead;
    }
    public ListNode reverseLinkedList(ListNode head,int k){
        ListNode newHead = null;
        ListNode ptr = head;
        while(k>0){
            ListNode nextNode = ptr.next;
            ptr.next = newHead;
            newHead = ptr;
            ptr = nextNode;
            k--;
        }
        return newHead;
    }
}
